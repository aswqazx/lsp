server.port=8084
server.servlet.context-path=/gzl

spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.name=oracle
spring.datasource.url=jdbc:oracle:thin:@127.0.0.1:1521:orcl
spring.datasource.username=aswqazx
spring.datasource.password=aswqazx

spring.jpa.show-sql=true
spring.jpa.open-in-view=false
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect

spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8

# hikari
# 控制从池返回的连接的默认自动提交行为。默认值：true
spring.datasource.hikari.auto-commit=true
# 等待来自池的连接的超时时间最大毫秒数。默认值：30000（30秒）
spring.datasource.hikari.connection-timeout=20000
# 允许连接在池中闲置的最长时间。 默认值：600000（10分钟）
spring.datasource.hikari.idle-timeout=10000
# 连接的最大生存期。默认值：1800000（30分钟）
spring.datasource.hikari.max-lifetime=600000
# 确认与数据库的连接仍然存在之前将要执行的查询。
spring.datasource.hikari.connection-test-query=select 1 from dual
# 最小空闲连接数  默认值：10
spring.datasource.hikari.minimum-idle=10
# 允许达到的最大大小，包括空闲和正在使用的连接。默认值：10
spring.datasource.hikari.maximum-pool-size=300

# undertow
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.threads.io=4
# 2.3.0以下
#server.undertow.io-threads=4
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载，默认值是IO线程数*8
server.undertow.threads.worker=32
# 2.3.0以下
#server.undertow.worker-threads=32
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分
server.undertow.buffer-size=1024
# 是否分配的直接内存
server.undertow.direct-buffers=true

camunda.bpm.admin-user.id=admin
camunda.bpm.admin-user.password=admin
camunda.bpm.admin-user.firstName=admin
camunda.bpm.filter.create=All tasks
# orale11g要添加这个
camunda.bpm.database.jdbc-batch-processing = false
